<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Order Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #f7f9fc;
    }
    /* Allow horizontal scrolling for wide tables */
    .table-container {
      overflow-x: auto;
    }
    .table-responsive {
      margin-top: 20px;
    }
    .table {
      table-layout: fixed;
      width: 100%;
    }
    .feedback-input {
      width: 100%;
    }
    /* Sticky header */
    thead th {
      position: sticky;
      top: 0;
      background-color: #343a40;
      color: white;
      z-index: 2;
    }
/* ===== Highlight badge for Song Album plan ===== */
    .highlight-plan {
      background: #fff3cd;
      border: 1px solid #ffeeba;
      padding: 0.2em 0.4em;
      border-radius: 0.25rem;
      font-weight: 600;
      display: inline-block;
    }
  </style>
</head>
<body class="bg-light">
  <div class="container-fluid my-4">
    <h1 class="mb-4 text-center">Order Dashboard</h1>
    <div class="mb-3 text-center">
      Logged in as: <strong><%= role %></strong> | <a href="/logout">Logout</a>
    </div>

    <!-- Search input -->
    <div class="row mb-4">
      <div class="col-md-3 offset-md-4">
        <input type="text" id="orderSearch" class="form-control" placeholder="Search Orders">
      </div>
<div class="col-md-2">
        <select id="sortFilter" class="form-select form-select-sm">
         <option value="">Default order</option>
         <option value="delivery">Sort by Expected Delivery</option>
       </select>
      </div>
    </div>

    <!-- Statistics -->
    <div class="container-fluid mb-4">
      <div class="row">
        <div class="col-md-4 offset-md-4">
          <div class="card shadow-sm">
            <div class="card-body text-center">
              <h5 class="card-title">Total Unfulfilled Orders</h5>
              <% let unfulfilled = orders.length; %>
              <h2 class="text-primary"><%= unfulfilled %></h2>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Orders Table -->
    <div class="table-container">
      <div class="table-responsive">
        <table class="table table-bordered table-striped align-middle" id="ordersTable">
          <colgroup>
            <col style="width:7%;">
            <col style="width:10%;">
            <col style="width:40%;">
            <col style="width:13%;">
            <col style="width:15%;">
            <col style="width:5%;">
          </colgroup>
          <thead class="table-dark">
            <tr>
              <th>Order Number</th>
              <th>Customer Info</th>
              <th>Order Details</th>
              <th>Expected Delivery</th>
              <th>Feedback/Changes</th>
              <th>Done</th>
            </tr>
          </thead>
          <tbody>
            <%
              // Helper functions for expected delivery
              function getDeliveryHours(order) {
                const timelines = [
                  { name: "Basic", ids: ["41290369269835"], hours: 240 },
                  { name: "Standard", ids: ["41290369302603", "41274164510795"], hours: 120 },
                  { name: "Premium", ids: ["41290369335371"], hours: 30 },
                  { name: "Beast", ids: ["41290369368139"], hours: 30 },
                  { name: "FAST", ids: ["41274164543563"], hours: 48 },
                  { name: "EXPRESS", ids: ["41274164576331"], hours: 24 }
                ];
                let matchedHours = [];
                if (order.line_items) {
                  order.line_items.forEach(item => {
                    const variantId = String(item.variant_id);
                    timelines.forEach(timeline => {
                      if (timeline.ids.includes(variantId)) {
                        matchedHours.push(timeline.hours);
                      }
                    });
                  });
                }
                return matchedHours.length > 0 ? Math.min(...matchedHours) : 240;
              }
              function getExpectedDelivery(order) {
                const createdAt = new Date(order.created_at);
                const hours = getDeliveryHours(order);
                const deliveryTimestamp = createdAt.getTime() + hours * 3600 * 1000;
                return new Date(deliveryTimestamp).toLocaleDateString("en-IN", {
                  timeZone: "Asia/Kolkata",
                  year: "numeric",
                  month: "short",
                  day: "numeric"
                });
              }
            %>
            <% orders.forEach(order => { %>
              <tr
                data-order-number="<%= order.name.toLowerCase() %>"
               data-delivery="<%= new Date(order.created_at).getTime() + getDeliveryHours(order)*3600*1000 %>"
              >
                <td><%= order.name %></td>
                <td>
                  <% if (order.customer) { %>
                    <%= order.customer.first_name %> <%= order.customer.last_name %><br>
                    <small><%= order.customer.phone %></small>
                  <% } else { %>
                    Guest
                  <% } %>
                </td>
                <td>
                  <div class="order-details-container" id="order-details-<%= order.id %>">
                    <% 
                      order.line_items.forEach(item => {
                        %><div><strong><%= item.title %></strong> &times; <%= item.quantity %><br><%
// Show custom badge for Song Album (variant 41280630784075)
            if (role === 'viewer' && String(item.variant_id) === "41280630784075") { %>
              <small class="highlight-plan">
                Plan: Song Album (3 songs, 30 hr delivery)
              </small><br>
          <% } 
                        
                        if (item.properties && item.properties.length > 0) {
                          item.properties.forEach(prop => {
                            const propName = prop.name.toLowerCase();
                            let displayValue = prop.value;

                            // Hide certain properties for viewers
                            if (role === 'viewer') {
                              // If it references any restricted phrase, skip
                              if (
                                propName.includes('whatsapp') ||
                                propName.includes('price') ||
                                propName.includes('song type') ||
                                propName.includes('uploaded images') ||
                                propName.includes('selected addons')
                              ) {
                                return; // skip showing
                              }
                              // If "form data" property for viewer, let's filter lines within it
                              if (propName.includes('form data')) {
                                // We'll filter lines that contain restricted keywords
                                let lines = displayValue.split('\n').filter(line => {
                                  const lowerLine = line.toLowerCase();
                                  return !(
                                    lowerLine.includes('whatsapp') ||
                                    lowerLine.includes('price') ||
                                    lowerLine.includes('song type') ||
                                    lowerLine.includes('uploaded images') ||
                                    lowerLine.includes('selected addons')
                                  );
                                });
                                displayValue = lines.join('\n');
                              }
                            }

                            // Show the (filtered) property to the user
                            %><small><%= prop.name %>: <%= displayValue %></small><br><%
                          });
                        }
                        %></div><hr class="my-1"><%
                      });
                    %>
                  </div>
                  <button class="btn btn-sm btn-secondary mt-1 copy-btn" data-order-id="<%= order.id %>">Copy</button>
                </td>
                <td><%= getExpectedDelivery(order) %></td>
                <td>
                  <!-- Read-only feedback/changes from order.note -->
                  <div><%= order.note || '' %></div>
                </td>
                <!-- Done / Editing / Delivered Checkboxes -->
                <td class="text-center">
                  <input 
                    type="checkbox" 
                    name="done" 
                    data-order-id="<%= order.id %>" 
                    class="status-checkbox done-checkbox" 
                    <%= order.status.done ? 'checked' : '' %> 
                  >
                </td>
              </tr>
            <% }); %>
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Client-side Scripts -->
  <script>
    // Search functionality (by order number)
    document.getElementById('orderSearch').addEventListener('input', function() {
      const searchValue = this.value.toLowerCase();
      document.querySelectorAll('#ordersTable tbody tr').forEach(function(row) {
        const orderNumber = row.getAttribute('data-order-number') || '';
        row.style.display = orderNumber.includes(searchValue) ? '' : 'none';
      });
    });

    // Copy order details to clipboard
    document.querySelectorAll('.copy-btn').forEach(function(button) {
      button.addEventListener('click', function() {
        const orderId = this.getAttribute('data-order-id');
        const detailsElement = document.getElementById('order-details-' + orderId);
        if (detailsElement) {
          navigator.clipboard.writeText(detailsElement.innerText).catch(function(err) {
            console.error('Failed to copy:', err);
          });
        }
      });
    });

    // Update status when checkboxes change
   function updateStatus(orderId, done) {
      fetch('/update_status', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId, done })
      })
      .then(response => response.json())
      .then(data => {
        if (!data.success) {
          alert('Error updating status: ' + data.error);
        }
      })
      .catch(err => {
        console.error('Error updating status:', err);
        alert('Error updating status.');
      });
    }
    document.querySelectorAll('.done-checkbox').forEach(function(cb) {
      cb.addEventListener('change', function() {
        updateStatus(this.dataset.orderId, this.checked);
     });
   });

// ===== Sort by Expected Delivery =====
   const originalRows = Array.from(document.querySelectorAll('#ordersTable tbody tr'));
   document.getElementById('sortFilter').addEventListener('change', function() {
     const tbody = document.querySelector('#ordersTable tbody');
     if (this.value === 'delivery') {
       const sorted = originalRows.slice().sort((a, b) =>
         parseInt(a.dataset.delivery) - parseInt(b.dataset.delivery)
       );
       tbody.innerHTML = '';
       sorted.forEach(r => tbody.appendChild(r));
     } else {
       tbody.innerHTML = '';
       originalRows.forEach(r => tbody.appendChild(r));
     }
   });
  </script>
</body>
</html>
