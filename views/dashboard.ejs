<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Order Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body { 
      background-color: #f7f9fc; 
    }
    .table-responsive { 
      margin-top: 20px; 
    }
    /* Force columns to respect percentages */
    .table {
      table-layout: fixed; /* Key for colgroup widths */
      width: 100%;
    }
    .feedback-input {
      width: 100%;
    }
  </style>
</head>
<body class="bg-light">
  <!-- Changed container to container-fluid for full width -->
  <div class="container-fluid my-4">
    <h1 class="mb-4 text-center">Order Dashboard</h1>
    <div class="mb-3 text-center">
      Logged in as: <strong><%= role %></strong> | <a href="/login">Logout</a>
    </div>
    <!-- Statistics section - add this right after the login info div -->
    <div class="container-fluid mb-4">
      <div class="row">
        <div class="col-md-6">
          <div class="card shadow-sm">
            <div class="card-body">
              <h5 class="card-title">Total Unfulfilled Orders</h5>
              <% 
                var unfulfilled = 0;
                orders.forEach(function(order) {
                  if (!order.delivered) {
                    unfulfilled++;
                  }
                });
              %>
              <h2 class="text-primary"><%= unfulfilled %></h2>
            </div>
          </div>
        </div>
        <div class="col-md-6">
          <div class="card shadow-sm">
            <div class="card-body">
              <h5 class="card-title">Language Breakdown</h5>
              <% 
                var languageCounts = {};
                orders.forEach(function(order) {
                  var language = "Unknown";
                  if (order.line_items) {
                    order.line_items.forEach(function(item) {
                      if (item.properties) {
                        item.properties.forEach(function(prop) {
                          if (prop.name.toLowerCase().includes('language')) {
                            language = prop.value || "Unknown";
                          }
                        });
                      }
                    });
                  }
                  if (!languageCounts[language]) {
                    languageCounts[language] = 0;
                  }
                  languageCounts[language]++;
                });
              %>
              <div class="row">
                <% for (var lang in languageCounts) { %>
                  <div class="col-auto mb-2">
                    <span class="badge bg-light text-dark border">
                      <%= lang %>: <%= languageCounts[lang] %>
                    </span>
                  </div>
                <% } %>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="table-responsive">
      <table class="table table-bordered table-striped align-middle">
        <!-- Define fixed column widths here -->
        <colgroup>
          <col style="width:7%;">
          <col style="width:10%;">
          <col style="width:50%;">
          <col style="width:6%;">
          <col style="width:17%;">
          <col style="width:5%;">  <!-- Done -->
          <col style="width:5%;">  <!-- Editing -->
          <col style="width:5%;">  <!-- Delivered -->
        </colgroup>

        <thead class="table-dark">
          <tr>
            <th>Order Number</th>
            <th>Customer Info</th>
            <th>Order Details</th>
            <th>Expected Delivery</th>
            <th>Feedback/Changes</th>
            <th>Done</th>
            <th>Editing</th>
            <th>Delivered</th>
          </tr>
        </thead>
        <tbody>
          <% 
            // Helper functions for expected delivery calculation
            function getDeliveryHours(order) {
              var timelines = [
                { name: "Basic", ids: ["41290369269835"], hours: 240 },
                { name: "Standard", ids: ["41290369302603", "41274164510795"], hours: 120 },
                { name: "Premium", ids: ["41290369335371"], hours: 30 },
                { name: "Beast", ids: ["41290369368139"], hours: 30 },
                { name: "FAST", ids: ["41274164543563"], hours: 48 },
                { name: "EXPRESS", ids: ["41274164576331"], hours: 24 }
              ];
              var matchedHours = [];
              order.line_items.forEach(function(item) {
                var variantId = String(item.variant_id);
                timelines.forEach(function(timeline) {
                  if(timeline.ids.indexOf(variantId) !== -1) {
                    matchedHours.push(timeline.hours);
                  }
                });
              });
              if(matchedHours.length > 0) {
                return Math.min.apply(null, matchedHours);
              }
              return 240; // default: Basic plan (10 days)
            }

            function getExpectedDelivery(order) {
              var createdAt = new Date(order.created_at);
              var hours = getDeliveryHours(order);
              var deliveryTimestamp = createdAt.getTime() + hours * 60 * 60 * 1000;
              return new Date(deliveryTimestamp).toLocaleDateString("en-IN", {
                timeZone: "Asia/Kolkata",
                year: "numeric",
                month: "short",
                day: "numeric"
              });
            }
          %>

          <% orders.forEach(function(order) { %>
            <tr>
              <!-- Order Number -->
              <td><%= order.name %></td>

              <!-- Customer Info -->
              <td>
                <% if (order.customer) { %>
                  <%= order.customer.first_name %> <%= order.customer.last_name %><br>
                  <small><%= order.customer.phone %></small>
                <% } else { %>
                  Guest
                <% } %>
              </td>

              <!-- Order Details with Copy Button -->
              <td>
                <div class="order-details-container" id="order-details-<%= order.id %>">
                  <% order.line_items.forEach(function(item) { %>
                    <div>
                      <strong><%= item.title %></strong> &times; <%= item.quantity %><br>
                      <% if (item.properties && item.properties.length > 0) { %>
                        <% item.properties.forEach(function(prop) { 
                            var propName = prop.name.toLowerCase();
                            var displayValue = prop.value;
                            var shouldHide = false;

                            // For properties from "Form Data", filter confidential info for viewers
                            if (propName.includes('form data')) {
                              if (role === 'viewer') {
                                var lines = displayValue.split('\n');
                                lines = lines.filter(function(line) {
                                  var lowerLine = line.toLowerCase();
                                  if (
                                    lowerLine.includes('whatsapp') ||
                                    lowerLine.includes('price') ||
                                    lowerLine.includes('song type') ||
                                    lowerLine.includes('uploaded images') ||
                                    lowerLine.includes('selected addons')
                                  ) {
                                    return false;
                                  }
                                  return true;
                                });
                                displayValue = lines.join('\n');
                              }
                            } else {
                              if (role === 'viewer') {
                                if (
                                  propName.includes('whatsapp') ||
                                  propName.includes('price') ||
                                  propName.includes('song type') ||
                                  propName.includes('uploaded images') ||
                                  propName.includes('selected addons')
                                ) {
                                  shouldHide = true;
                                }
                              }
                            }
                        %>
                          <% if (!shouldHide) { %>
                            <small><%= prop.name %>: <%= displayValue %></small><br>
                          <% } %>
                        <% }); %>
                      <% } %>
                    </div>
                    <hr class="my-1">
                  <% }); %>
                </div>
                <button class="btn btn-sm btn-secondary mt-1 copy-btn" data-order-id="<%= order.id %>">Copy</button>
              </td>

              <!-- Expected Delivery -->
              <td>
                <%= getExpectedDelivery(order) %>
              </td>

              <!-- Feedback/Changes -->
              <td>
                <input type="text" value="<%= order.note || '' %>" data-order-id="<%= order.id %>" class="feedback-field form-control" <%= role !== 'admin' ? 'readonly' : '' %>>
              </td>

              <!-- Done Checkbox -->
              <td class="text-center">
                <input type="checkbox" name="done" data-order-id="<%= order.id %>" class="status-checkbox done-checkbox" <%= order.done ? 'checked' : '' %>>
              </td>
              
              <!-- Editing Checkbox -->
              <td class="text-center">
                <input type="checkbox" name="editing" data-order-id="<%= order.id %>" class="status-checkbox editing-checkbox" <%= order.editing ? 'checked' : '' %>>
              </td>
              
              <!-- Delivered Checkbox -->
              <td class="text-center">
                <input type="checkbox" name="delivered" data-order-id="<%= order.id %>" class="status-checkbox delivered-checkbox" <%= order.delivered ? 'checked' : '' %>>
              </td>
            </tr>
          <% }); %>
        </tbody>
      </table>
    </div>
  </div>

  <script>
    // Add event listeners for feedback fields
    document.querySelectorAll('.feedback-field').forEach(function(field) {
      field.addEventListener('blur', function() {
        var orderId = this.getAttribute('data-order-id');
        var feedback = this.value;
        
        updateOrderData(orderId, { note: feedback });
      });
    });

    // Add event listeners for all copy buttons (silent copy)
    document.querySelectorAll('.copy-btn').forEach(function(button) {
      button.addEventListener('click', function() {
        var orderId = this.getAttribute('data-order-id');
        var detailsElement = document.getElementById('order-details-' + orderId);
        if (detailsElement) {
          var textToCopy = detailsElement.innerText;
          navigator.clipboard.writeText(textToCopy)
            .then(function() {
              // Visual feedback for copy
              button.innerText = "Copied!";
              setTimeout(function() {
                button.innerText = "Copy";
              }, 1500);
            })
            .catch(function(err) {
              console.error('Failed to copy text:', err);
            });
        }
      });
    });

    // Add event listeners for status checkboxes (Done, Editing, Delivered)
    document.querySelectorAll('.status-checkbox').forEach(function(checkbox) {
      checkbox.addEventListener('change', function() {
        var orderId = this.getAttribute('data-order-id');
        var checkboxName = this.name;
        var isChecked = this.checked;
        
        // Create an object with the specific checkbox that was changed
        var updateData = {};
        updateData[checkboxName] = isChecked;
        
        // If we check "delivered", also set the feedback from the current input value
        if (checkboxName === 'delivered' && isChecked) {
          var feedbackField = document.querySelector('.feedback-field[data-order-id="'+orderId+'"]');
          if (feedbackField) {
            updateData.note = feedbackField.value;
          }
        }
        
        updateOrderData(orderId, updateData);
      });
    });
    
    // Function to update order data
    function updateOrderData(orderId, updateData) {
      fetch('/api/update-order', {  // Updated URL to include /api/
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          orderId: orderId,
          updates: updateData
        })
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        console.log("Order updated:", data);
      })
      .catch(err => {
        console.error("Error updating order:", err);
        alert("Failed to update order. Please try again.");
      });
    }
  </script>
</body>
</html>
